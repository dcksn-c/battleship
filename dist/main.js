(()=>{const t=document.querySelector(".ships-container"),e=document.querySelector(".flip-btn"),n=document.querySelector(".gameboard"),r=document.querySelector(".start-btn"),s=document.querySelector(".info-display"),o=document.querySelector(".btn-container");let i=0;function a(t,e){const r=document.createElement("div");r.classList.add("game-board"),r.style.backgroundColor=t,r.id=e;for(let t=0;t<100;t++){const e=document.createElement("div");e.classList.add("cell"),e.id=t,r.append(e)}n.append(r)}function l(t,e){return{name:t,length:e}}e.addEventListener("click",(function(){const e=Array.from(t.children);i=0===i?90:0,e.forEach((t=>t.style.transform=`rotate(${i}deg)`))})),a("hsl(200, 100%, 50%)","player"),a("hsl(200, 100%, 50%)","computer");const c=[l("destroyer",2),l("submarine",3),l("cruiser",3),l("battleship",4),l("carrier",5)];let u,d;function h(t,e,n,r){let s;e?s=n<=100-r.length?n:100-r.length:e||(s=n<=100-10*r.length?n:n-10*r.length+10);const o=[];for(let n=0;n<r.length;n++)e?o.push(t[Number(s)+n]):o.push(t[Number(s)+10*n]);let i;e?o.every(((t,e)=>i=o[0].id%10!=10-(o.length-(e+1)))):o.every(((t,e)=>i=o[0].id<10*e+1+90));const a=o.every((t=>!t.classList.contains("taken")));return{shipPieces:o,validPos:i,notTaken:a}}function m(t,e,n){const r=document.querySelectorAll(`#${t} div`),s=Math.random()<.5,o="player"===t?0===i:s,a=Math.floor(10*Math.random()*10),l=n||a,{shipPieces:c,validPos:d,notTaken:f}=h(r,o,l,e);d&&f?c.forEach((t=>{t.classList.add(e.name),t.classList.add("taken")})):"computer"===t?m(t,e,n):"player"===t&&(u=!0)}function f(t){u=!1,d=t.target}function p(t){t.preventDefault();const e=c[d.id];!function(t,e){const n=document.querySelectorAll("#player div"),r=0===i,{shipPieces:s,validPos:o,notTaken:a}=h(n,r,t,e);o&&a&&s.forEach((t=>{t.classList.add("hover"),setTimeout((()=>t.classList.remove("hover")),200)}))}(t.target.id,e)}function y(t){const e=t.target.id;m("player",c[d.id],e),u||d.remove()}c.forEach((t=>{m("computer",t)})),Array.from(t.children).forEach((t=>t.addEventListener("dragstart",f))),document.querySelectorAll("#player div").forEach((t=>{t.addEventListener("dragover",p),t.addEventListener("drop",y)}));let v,L=!1;r.addEventListener("click",(()=>{void 0===v&&(0!==t.children.length?s.textContent="Please place all your ships first!":(document.querySelectorAll("#computer div").forEach((t=>t.addEventListener("click",b))),v=!0,s.textContent="Your turn.",o.style.display="none"))}));let g=[],k=[];const E=[],C=[];function b(t){if(!L){if(t.target.classList.contains("taken")){t.target.classList.add("hit"),s.textContent="Hit!";let e=Array.from(t.target.classList);e=e.filter((t=>"cell"!==t)),e=e.filter((t=>"hit"!==t)),e=e.filter((t=>"taken"!==t)),g.push(...e),x("player",g,E)}else t.target.classList.contains("taken")||(s.textContent="Missed.",t.target.classList.add("miss"));v=!1,document.querySelectorAll("#computer div").forEach((t=>t.removeEventListener("click",b))),setTimeout(q,2e3)}}function q(){L||(s.textContent="Computer's turn",setTimeout((()=>{const t=Math.floor(10*Math.random()*10),e=document.querySelectorAll("#player div");if(e[t].classList.contains("taken")&&e[t].classList.contains("hit"))q();else if(e[t].classList.contains("taken")&&!e[t].classList.contains("hit")){e[t].classList.add("hit"),s.textContent="Your ship is hit!";let n=Array.from(e[t].classList);n=n.filter((t=>"cell"!==t)),n=n.filter((t=>"hit"!==t)),n=n.filter((t=>"taken"!==t)),k.push(...n),x("computer",k,C)}else s.textContent="Computer missed.",e[t].classList.add("miss")}),3e3),setTimeout((()=>{v=!0,s.textContent="Your turn.",document.querySelectorAll("#computer div").forEach((t=>t.addEventListener("click",b)))}),6e3))}function x(t,e,n){function r(r,o){e.filter((t=>t===r)).length===o&&(s.textContent=`${t}'s ${r} has been sunk!`,"player"===t?(s.textContent=`Computer's ${r} has been sunk!`,g=e.filter((t=>t!==r))):"computer"===t&&(s.textContent=`Computer has sunk your ${r}!`,k=e.filter((t=>t!==r))),n.push(r))}r("destroyer",2),r("submarine",3),r("cruiser",3),r("battleship",4),r("carrier",5),5===E.length?(s.textContent="You sunk all computer's ships! You won!",L=!0):5===C.length&&(s.textContent="The computer has sunk all your ships! You lose!",L=!0)}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,